#!/usr/bin/env bash

set -euo pipefail

###############################################################################
# script that uses files to sync brew taps/packages on a sytem
###############################################################################

prefix=".brew-sync"
path="${HOME}/${prefix}"

taps_file="${path}/taps"
packages_file="${path}/packages"

cmd="${1:-"up"}"

curr_taps=$(brew tap | sort -u)
curr_packages=$(brew list | sort -u)

case $cmd in
  "init")
    mkdir "${HOME}/${prefix}"
    ;;
  "save")
    cp "${taps_file}" "${taps_file}.old"
    brew tap | sort -u > "${taps_file}"
    delta "${taps_file}.old" "${taps_file}"

    cp "${packages_file}" "${packages_file}.old"
    brew list | sort -u > "${packages_file}"
    delta "${packages_file}.old" "${packages_file}"
    ;;
  "up")
    brew update --quiet
    brew upgrade --quiet

    goal_packages=$(sort -u "${packages_file}")
    goal_taps=$(sort -u "${taps_file}")

    to_uninstall=$(comm -13 <(printf '%s\n' "$goal_packages") <(printf '%s\n' "$curr_packages"))
    if [ -n "${to_uninstall}" ]; then
      gum confirm "Uninstall brew packages (${to_uninstall})?" && echo "${to_uninstall}" | xargs brew uninstall --force --quiet
    fi

    to_untap=$(comm -13 <(printf '%s\n' "$goal_taps") <(printf '%s\n' "$curr_taps"))
    if [ -n "${to_untap}" ]; then
      gum confirm "Untap brew packages (${to_untap})?" && echo "${to_untap}" | xargs brew untap --force --quiet
    fi

    to_tap=$(comm -23 <(printf '%s\n' "$goal_taps") <(printf '%s\n' "$curr_taps"))
    if [ -n "${to_tap}" ]; then
      gum confirm "Tap brew packages (${to_tap})?" && echo "${to_tap}" | xargs brew tap --quiet
    fi

    to_install=$(comm -23 <(printf '%s\n' "$goal_packages") <(printf '%s\n' "$curr_packages"))
    if [ -n "${to_install}" ]; then
      gum confirm "Install brew packages (${to_install})?" && echo "${to_install}" | xargs brew install --quiet
    fi

    brew autoremove --quiet
    ;;
  "unlock")
    gum confirm "Remove brew locks?" && rm -rf "$(brew --prefix)/var/homebrew/locks"
    ;;
  *)
    echo "${cmd} not valid command"
    ;;
esac

